function CompacterMetiers() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // üóÇ Feuille source : "Synth√®se"
  const sourceSheet = ss.getSheetByName("Synth√®se") || ss.getActiveSheet();
  const data = sourceSheet.getDataRange().getValues();

  const headers = data[0].map(h => h.toString().trim());
  const rows = data.slice(1);

  const indexSubmissionId = headers.findIndex(h => h.toLowerCase() === "submission id");
  const indexRespondentId = headers.findIndex(h => h.toLowerCase() === "respondent id");
  const indexSubmittedAt = headers.findIndex(h => h.toLowerCase() === "submitted at");
  const indexRaison = headers.findIndex(h => h.toLowerCase() === "raison sociale");

  if (indexRaison === -1) throw new Error('Colonne "Raison sociale" non trouv√©e');

  const output = [["Submission ID", "Respondent ID", "Submitted at", "Raison sociale", "M√©tier", "Ann√©e", "Nombre"]];

  // üîç Identifier les couples (m√©tier, planning)
  const couples = [];
  for (let i = 0; i < headers.length - 1; i++) {
    const h = headers[i].toLowerCase();
    const hNext = headers[i + 1].toLowerCase();

    if (
      h.match(/(premier|deuxi√®me|troisi√®me|quatri√®me|cinqui√®me|sixi√®me|septi√®me|huiti√®me|neuvi√®me|dixi√®me) m√©tier/) &&
      hNext.includes("quand") &&
      hNext.includes("combien")
    ) {
      couples.push({ metierCol: i, planningCol: i + 1 });
    }
  }

  // üì¶ Parcours des lignes
  for (let row of rows) {
    const submissionId = row[indexSubmissionId] || "";
    const respondentId = row[indexRespondentId] || "";
    const submittedAt = row[indexSubmittedAt] || "";
    const raisonSociale = row[indexRaison] || "";

    for (let { metierCol, planningCol } of couples) {
      const metier = row[metierCol];
      const planning = row[planningCol];

      if (!metier || !planning) continue;

      const pairs = planning.toString().split(",");
      for (let p of pairs) {
        const [annee, nombreStr] = p.trim().split(":").map(s => s.trim());
        const nombre = parseInt(nombreStr, 10);
        if (annee && !isNaN(nombre)) {
          output.push([
            submissionId,
            respondentId,
            submittedAt,
            raisonSociale,
            metier,
            annee,
            nombre,
          ]);
        }
      }
    }
  }

  // üìÑ Cr√©er ou recr√©er la feuille "Export M√©tiers simplifi√©"
  const exportSheetName = "Export M√©tiers simplifi√©";
  const existingExportSheet = ss.getSheetByName(exportSheetName);
  if (existingExportSheet) ss.deleteSheet(existingExportSheet);
  const exportSheet = ss.insertSheet(exportSheetName);
  exportSheet.getRange(1, 1, output.length, output[0].length).setValues(output);

  // üìä Calcul des totaux PAR M√âTIER ET ANN√âE UNIQUEMENT
  const summary = [["Submission ID", "Respondent ID", "Submitted at", "M√©tier", "Ann√©e", "Total"]];
  const map = {};

  for (let i = 1; i < output.length; i++) {
    const [ , , , , metier, annee, nombre] = output[i];  // Ignorer les 3 premi√®res colonnes
    const key = `${metier}__${annee}`;
    map[key] = (map[key] || 0) + nombre;
  }

  for (let key in map) {
    const [metier, annee] = key.split("__");
    summary.push(["", "", "", metier, annee, map[key]]);
  }

  // üìÑ Cr√©er ou recr√©er la feuille "Totaux par m√©tier"
  const summarySheetName = "Totaux par m√©tier";
  const existingSummarySheet = ss.getSheetByName(summarySheetName);
  if (existingSummarySheet) ss.deleteSheet(existingSummarySheet);
  const summarySheet = ss.insertSheet(summarySheetName);
  summarySheet.getRange(1, 1, summary.length, summary[0].length).setValues(summary);
}